/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: fe08469aaccd2d1ac639b14e9dcdfeb7 */

/* creation time: Sat Sep 23 11:22:48 2017 */
/* tdr version: 2.7.22, build at 20170613 */

#ifndef logsvrprotocol_h_
#define logsvrprotocol_h_

#include "TdrBuf.h"
#include "TdrError.h"
#include "TdrBufUtil.h"

#include "datadefineforbusi.h"

namespace GAPSLOGSVR
{

using tsf4g_tdr::TdrError;
using tsf4g_tdr::TdrReadBuf;
using tsf4g_tdr::TdrWriteBuf;


enum
{
        PROJECT_NAME_MAX_LEN = 64,
        FUNCTION_NAME_MAX_LEN = 128,
        LOG_CONTENT_MAX_LEN = 256,
        SQL_STATEMENT_MAX_LEN = 2048,
        GAPS_SERVER_TO_LOGSVR = 1, // 标识版本号
        STR_TIME_LEN = 20,
        CS_CMD_DC_SENDDATA_REQ = 101, // 数据收集端发送采集到的数据给LOGSERVER
        CS_CMD_DC_SENDDATA_RES = 102, // LOGSERVER收到数据的响应包
        CS_CMD_HEARTBEAT = 103, // 心跳命令
        CS_CMD_DC_SEND_BASE_INFO_REQ = 111, // 发送基本信息给datacenter
        CS_CMD_DC_SEND_BASE_INFO_RES = 112, // 发送基本信息给datacenter,datacenter回包
        CS_CMD_DC_SEND_MEMORY_INFO_REQ = 113, // 发送MEM信息给datacenter
        CS_CMD_DC_SEND_MEMORY_INFO_RES = 114, // 发送MEM信息给datacenter,datacenter回包
        CS_CMD_DC_SEND_CPU_INFO_REQ = 115, // 发送CPU信息给datacenter
        CS_CMD_DC_SEND_CPU_INFO_RES = 116, // 发送CPU信息给datacenter,datacenter回包
        CS_CMD_DC_SEND_DISK_INFO_REQ = 117, // 发送DISK信息给datacenter
        CS_CMD_DC_SEND_DISK_INFO_RES = 118, // 发送DISK信息给datacenter,datacenter回包
        CS_CMD_DC_SEND_NETWORK_INFO_REQ = 119, // 发送NETWORK信息给datacenter
        CS_CMD_DC_SEND_NETWORK_INFO_RES = 120, // 发送NETWORK信息给datacenter,datacenter回包
        CS_CMD_DC_SEND_PROCESS_INFO_REQ = 121, // 发送PROCESS信息给datacenter
        CS_CMD_DC_SEND_PROCESS_INFO_RES = 122, // 发送PROCESS信息给datacenter,datacenter回包
        CS_CMD_DC_SEND_TEST_IP_REQ = 123, // 发送testip信息给datacenter
        CS_CMD_DC_SEND_TEST_IP_RES = 124, // 发送testip信息给datacenter,datacenter回包
        CS_CMD_GAPS_STATICS_REQ = 201, // 统计日志请求命令
        CS_CMD_GAPS_STATICS_RES = 202, // 统计日志响应命令
        CS_CMD_GAPS_MSGRESTIME_REQ = 203, // 机器人消息响应时间请求命令
        CS_CMD_GAPS_MSGRESTIME_RES = 204, // 机器人消息响应时间响应命令
        GAPS_ROBOT_MAX_NUM = 10000, // 机器人数量最大值
        GAPS_FOCUS_MSG_MAX_NUM = 10, // 对单个机器人关注的消息对最大数
        CS_CMD_GAPS_SCRIPT_REQ = 205, // 脚本日志请求命令
        CS_CMD_GAPS_SCRIPT_RES = 206, // 脚本日志响应命令
        CS_CMD_GAPS_TESTSTART_REQ = 207, // 测试开始请求命令
        CS_CMD_GAPS_TESTSTART_RES = 208, // 测试开始响应命令
        CS_CMD_GAPS_TESTEND_REQ = 209, // 测试结束请求命令
        CS_CMD_GAPS_TESTEND_RES = 210, // 测试结束响应命令
        CS_CMD_GAPS_TRANS_INFO = 211, // 事务统计信息
        CS_CMD_GAPS_TRANS_INFO_ARRAY = 212, // 事务统计信息数组
        MAX_TRANS_NAME_LEN = 1024, // 事务名最大长度
        MAX_PROJECT_NAME_LEN = 64, // 项目名最大长度
        MAX_IP_LEN = 64, // ip最大长度
        MAX_TRANS_INFO_NUM = 512, // 事务数组最大元素个数
        CS_CMD_STATFORBUSI_REQ = 213, // 各种回包数据统计消息请求保存
        CS_CMD_STATFORBUSI_RES = 214, // 各种回包数据统计消息保存响应
        STAT_BUSI_MAX_NUM = 512, // 一次发送的最大统计数据信息
        CS_CMD_EASY_MODE_REQ = 215, // 简单模式结果保存请求
        CS_CMD_EASY_MODE_TOTAL_REQ = 217, // 简单模式所有结果保存请求
        CS_CMD_GAPS_HTTP_DEBUG_REQ = 219, // 简单模式上传debug调试结果信息请求
};


#pragma pack(1)


class CSDataSendReq
{
        public: /* members */
                char szSqlData[SQL_STATEMENT_MAX_LEN];

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSDataSendReq          tagCSDataSendReq;
typedef       CSDataSendReq             CSDATASENDREQ;
typedef       CSDataSendReq*          LPCSDATASENDREQ;
typedef const CSDataSendReq*         LCPCSDATASENDREQ;


class CSDataSendRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSDataSendRes          tagCSDataSendRes;
typedef       CSDataSendRes             CSDATASENDRES;
typedef       CSDataSendRes*          LPCSDATASENDRES;
typedef const CSDataSendRes*         LCPCSDATASENDRES;


class CSHeartBeat
{
        public: /* members */
                int32_t iCollectorTime;
                int32_t iLogSvrTime;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSHeartBeat          tagCSHeartBeat;
typedef       CSHeartBeat             CSHEARTBEAT;
typedef       CSHeartBeat*          LPCSHEARTBEAT;
typedef const CSHeartBeat*         LCPCSHEARTBEAT;


class CSSendBaseReq
{
        public: /* members */
                char szCheckdate[12];
                char szHostname[64];
                char szHostip[16];
                char szOsversion[64];
                int32_t iCpunum;
                char szCpumodel[64];
                int32_t iMemorycap;
                int32_t iSwapcap;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendBaseReq          tagCSSendBaseReq;
typedef       CSSendBaseReq             CSSENDBASEREQ;
typedef       CSSendBaseReq*          LPCSSENDBASEREQ;
typedef const CSSendBaseReq*         LCPCSSENDBASEREQ;


class CSSendBaseRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendBaseRes          tagCSSendBaseRes;
typedef       CSSendBaseRes             CSSENDBASERES;
typedef       CSSendBaseRes*          LPCSSENDBASERES;
typedef const CSSendBaseRes*         LCPCSSENDBASERES;


class CSSendMemReq
{
        public: /* members */
                char szCollecttime[STR_TIME_LEN];
                char szServicename[PROJECT_NAME_MAX_LEN];
                char szServiceversion[PROJECT_NAME_MAX_LEN];
                char szTestip[16];
                uint64_t ullProcessmemtotal;
                uint64_t ullFree;
                uint64_t ullShared;
                uint64_t ullBuffers;
                uint64_t ullCached;
                uint64_t ullSwaptotal;
                uint64_t ullSwapused;
                uint64_t ullSwapfree;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendMemReq          tagCSSendMemReq;
typedef       CSSendMemReq             CSSENDMEMREQ;
typedef       CSSendMemReq*          LPCSSENDMEMREQ;
typedef const CSSendMemReq*         LCPCSSENDMEMREQ;


class CSSendMemRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendMemRes          tagCSSendMemRes;
typedef       CSSendMemRes             CSSENDMEMRES;
typedef       CSSendMemRes*          LPCSSENDMEMRES;
typedef const CSSendMemRes*         LCPCSSENDMEMRES;


class CSSendCPUReq
{
        public: /* members */
                char szCollecttime[STR_TIME_LEN];
                char szServicename[PROJECT_NAME_MAX_LEN];
                char szServiceversion[PROJECT_NAME_MAX_LEN];
                char szTestip[16];
                char szCpuname[8];
                float fCpuratio;
                float fSystempercent;
                float fUserprocesspercenet;
                float fIdlepercent;
                float fLoadavg;
                float fLoadavg5;
                float fLoadavg15;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendCPUReq          tagCSSendCPUReq;
typedef       CSSendCPUReq             CSSENDCPUREQ;
typedef       CSSendCPUReq*          LPCSSENDCPUREQ;
typedef const CSSendCPUReq*         LCPCSSENDCPUREQ;


class CSSendCPURes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendCPURes          tagCSSendCPURes;
typedef       CSSendCPURes             CSSENDCPURES;
typedef       CSSendCPURes*          LPCSSENDCPURES;
typedef const CSSendCPURes*         LCPCSSENDCPURES;


class CSSendDiskReq
{
        public: /* members */
                char szCollecttime[STR_TIME_LEN];
                char szServicename[PROJECT_NAME_MAX_LEN];
                char szServiceversion[PROJECT_NAME_MAX_LEN];
                char szTestip[16];
                char szDiskname[16];
                float fRrqm;
                float fWrqm;
                float r;
                float w;
                float fRsec;
                float fWsec;
                float fRkb;
                float fWkb;
                float fAvgrq;
                float fAvgqu;
                float fAwait;
                float fSvctm;
                float fUtil;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendDiskReq          tagCSSendDiskReq;
typedef       CSSendDiskReq             CSSENDDISKREQ;
typedef       CSSendDiskReq*          LPCSSENDDISKREQ;
typedef const CSSendDiskReq*         LCPCSSENDDISKREQ;


class CSSendDiskRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendDiskRes          tagCSSendDiskRes;
typedef       CSSendDiskRes             CSSENDDISKRES;
typedef       CSSendDiskRes*          LPCSSENDDISKRES;
typedef const CSSendDiskRes*         LCPCSSENDDISKRES;


class CSSendNetReq
{
        public: /* members */
                char szCollecttime[STR_TIME_LEN];
                char szServicename[PROJECT_NAME_MAX_LEN];
                char szServiceversion[PROJECT_NAME_MAX_LEN];
                char szTestip[16];
                char szNetname[16];
                uint64_t ullRxbytpersecond;
                uint64_t ullTxbytpersecond;
                uint64_t ullRxpckpersecond;
                uint64_t ullTxpckpersecond;
                uint64_t ullRxpackerrorpersecond;
                uint64_t ullTxpackerrorpersecond;
                uint64_t ullRxpackdroppersecond;
                uint64_t ullTxpackdroppersecond;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendNetReq          tagCSSendNetReq;
typedef       CSSendNetReq             CSSENDNETREQ;
typedef       CSSendNetReq*          LPCSSENDNETREQ;
typedef const CSSendNetReq*         LCPCSSENDNETREQ;


class CSSendNetRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendNetRes          tagCSSendNetRes;
typedef       CSSendNetRes             CSSENDNETRES;
typedef       CSSendNetRes*          LPCSSENDNETRES;
typedef const CSSendNetRes*         LCPCSSENDNETRES;


class CSSendProcessReq
{
        public: /* members */
                char szCollecttime[STR_TIME_LEN];
                char szServicename[PROJECT_NAME_MAX_LEN];
                char szServiceversion[PROJECT_NAME_MAX_LEN];
                char szTestip[16];
                char szProcessname[256];
                uint64_t ullProcessid;
                uint64_t ullVirt;
                uint64_t ullRes;
                uint64_t ullShr;
                float fCpu;
                float fMem;
                uint64_t ullFilehandlenum;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendProcessReq          tagCSSendProcessReq;
typedef       CSSendProcessReq             CSSENDPROCESSREQ;
typedef       CSSendProcessReq*          LPCSSENDPROCESSREQ;
typedef const CSSendProcessReq*         LCPCSSENDPROCESSREQ;


class CSSendProcessRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSSendProcessRes          tagCSSendProcessRes;
typedef       CSSendProcessRes             CSSENDPROCESSRES;
typedef       CSSendProcessRes*          LPCSSENDPROCESSRES;
typedef const CSSendProcessRes*         LCPCSSENDPROCESSRES;


class TestIpReq
{
        public: /* members */
                char szSendtime[STR_TIME_LEN];
                char szTestip[16];

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       TestIpReq          tagTestIpReq;
typedef       TestIpReq             TESTIPREQ;
typedef       TestIpReq*          LPTESTIPREQ;
typedef const TestIpReq*         LCPTESTIPREQ;


class CSStatisticsLogReq
{
        public: /* members */
                int32_t iTestStartTime;
                int32_t iLastTime;
                int32_t iRobotTotalNum;
                int32_t iRobotOnlineNum;
                int32_t iRobotOfflineNum;
                int32_t iRecvPkgTotalNum;
                int32_t iSndPkgTotalNum;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSStatisticsLogReq          tagCSStatisticsLogReq;
typedef       CSStatisticsLogReq             CSSTATISTICSLOGREQ;
typedef       CSStatisticsLogReq*          LPCSSTATISTICSLOGREQ;
typedef const CSStatisticsLogReq*         LCPCSSTATISTICSLOGREQ;


class CSStatisticsLogRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSStatisticsLogRes          tagCSStatisticsLogRes;
typedef       CSStatisticsLogRes             CSSTATISTICSLOGRES;
typedef       CSStatisticsLogRes*          LPCSSTATISTICSLOGRES;
typedef const CSStatisticsLogRes*         LCPCSSTATISTICSLOGRES;


class SingleMsgResTimeReqItem
{
        public: /* members */
                int32_t iResponseMaxTime;
                int32_t iResponseMinTime;
                int32_t iResponseAvgTime;
                int32_t iReqMsgNum; //发包数量
                int32_t iRspMsgNum; //收包数量
                int32_t iRspMsgSuccNum; //收包结果成功数量
                uint32_t dwMsgReqID;
                uint32_t dwMsgResID;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       SingleMsgResTimeReqItem          tagSingleMsgResTimeReqItem;
typedef       SingleMsgResTimeReqItem             SINGLEMSGRESTIMEREQITEM;
typedef       SingleMsgResTimeReqItem*          LPSINGLEMSGRESTIMEREQITEM;
typedef const SingleMsgResTimeReqItem*         LCPSINGLEMSGRESTIMEREQITEM;


class RobotMsgResTimeReqItem
{
        public: /* members */
                uint32_t dwUin;
                uint32_t dwMsgCoupleNum; //机器人的数量
                SingleMsgResTimeReqItem astMsgTimeList[GAPS_FOCUS_MSG_MAX_NUM];

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       RobotMsgResTimeReqItem          tagRobotMsgResTimeReqItem;
typedef       RobotMsgResTimeReqItem             ROBOTMSGRESTIMEREQITEM;
typedef       RobotMsgResTimeReqItem*          LPROBOTMSGRESTIMEREQITEM;
typedef const RobotMsgResTimeReqItem*         LCPROBOTMSGRESTIMEREQITEM;


class CSGapsMsgResTimeReq
{
        public: /* members */
                int32_t iTestStartTime;
                int32_t iLastTime;
                uint32_t dwRobotNum; //机器人的数量
                RobotMsgResTimeReqItem astRobotMsgResTimeList[GAPS_ROBOT_MAX_NUM];

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsMsgResTimeReq          tagCSGapsMsgResTimeReq;
typedef       CSGapsMsgResTimeReq             CSGAPSMSGRESTIMEREQ;
typedef       CSGapsMsgResTimeReq*          LPCSGAPSMSGRESTIMEREQ;
typedef const CSGapsMsgResTimeReq*         LCPCSGAPSMSGRESTIMEREQ;


class CSGapsMsgResTimeRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsMsgResTimeRes          tagCSGapsMsgResTimeRes;
typedef       CSGapsMsgResTimeRes             CSGAPSMSGRESTIMERES;
typedef       CSGapsMsgResTimeRes*          LPCSGAPSMSGRESTIMERES;
typedef const CSGapsMsgResTimeRes*         LCPCSGAPSMSGRESTIMERES;


class CSScriptLogReq
{
        public: /* members */
                char szPrjName[PROJECT_NAME_MAX_LEN];
                int32_t iTime;
                char szFileName[PROJECT_NAME_MAX_LEN];
                int32_t iErrorType; //0--表示无错误，即普通日志
                char szFunctionName[FUNCTION_NAME_MAX_LEN];
                int32_t iLineNo; //行号
                char szLogContent[LOG_CONTENT_MAX_LEN];

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSScriptLogReq          tagCSScriptLogReq;
typedef       CSScriptLogReq             CSSCRIPTLOGREQ;
typedef       CSScriptLogReq*          LPCSSCRIPTLOGREQ;
typedef const CSScriptLogReq*         LCPCSSCRIPTLOGREQ;


class CSScriptLogRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSScriptLogRes          tagCSScriptLogRes;
typedef       CSScriptLogRes             CSSCRIPTLOGRES;
typedef       CSScriptLogRes*          LPCSSCRIPTLOGRES;
typedef const CSScriptLogRes*         LCPCSSCRIPTLOGRES;


class CSGapsTestStartReq
{
        public: /* members */
                char szVersion[PROJECT_NAME_MAX_LEN];
                int32_t iTestStartTime;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsTestStartReq          tagCSGapsTestStartReq;
typedef       CSGapsTestStartReq             CSGAPSTESTSTARTREQ;
typedef       CSGapsTestStartReq*          LPCSGAPSTESTSTARTREQ;
typedef const CSGapsTestStartReq*         LCPCSGAPSTESTSTARTREQ;


class CSGapsTestStartRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsTestStartRes          tagCSGapsTestStartRes;
typedef       CSGapsTestStartRes             CSGAPSTESTSTARTRES;
typedef       CSGapsTestStartRes*          LPCSGAPSTESTSTARTRES;
typedef const CSGapsTestStartRes*         LCPCSGAPSTESTSTARTRES;


class CSGapsTestEndReq
{
        public: /* members */
                char szVersion[PROJECT_NAME_MAX_LEN];
                int32_t iTestEndTime;
                int32_t iTestStartTime;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsTestEndReq          tagCSGapsTestEndReq;
typedef       CSGapsTestEndReq             CSGAPSTESTENDREQ;
typedef       CSGapsTestEndReq*          LPCSGAPSTESTENDREQ;
typedef const CSGapsTestEndReq*         LCPCSGAPSTESTENDREQ;


class CSGapsTestEndRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsTestEndRes          tagCSGapsTestEndRes;
typedef       CSGapsTestEndRes             CSGAPSTESTENDRES;
typedef       CSGapsTestEndRes*          LPCSGAPSTESTENDRES;
typedef const CSGapsTestEndRes*         LCPCSGAPSTESTENDRES;


class CSGapsTransInfo
{
        public: /* members */
                char szTransName[MAX_TRANS_NAME_LEN];
                uint32_t dwTv_sec; //发包机器的当前时间：秒
                uint32_t dwTv_msec; //发包机器的当前时间：微妙
                uint32_t dwTimeCost;
                uint32_t dwSendSize;
                uint32_t dwRecvSize;
                unsigned char bResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsTransInfo          tagCSGapsTransInfo;
typedef       CSGapsTransInfo             CSGAPSTRANSINFO;
typedef       CSGapsTransInfo*          LPCSGAPSTRANSINFO;
typedef const CSGapsTransInfo*         LCPCSGAPSTRANSINFO;


class CSGapsTransInfoArray
{
        public: /* members */
                int32_t iTransInfoNum; //事务数组元素的实际个数
                CSGapsTransInfo astTransInfoArray[MAX_TRANS_INFO_NUM]; //事务数组

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSGapsTransInfoArray          tagCSGapsTransInfoArray;
typedef       CSGapsTransInfoArray             CSGAPSTRANSINFOARRAY;
typedef       CSGapsTransInfoArray*          LPCSGAPSTRANSINFOARRAY;
typedef const CSGapsTransInfoArray*         LCPCSGAPSTRANSINFOARRAY;


class STErrCodeStatInfo
{
        public: /* members */
                STErrorCodeData stErrorCodeData; //错误码基本信息
                int32_t iCount; //该错误码出现次数

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       STErrCodeStatInfo          tagSTErrCodeStatInfo;
typedef       STErrCodeStatInfo             STERRCODESTATINFO;
typedef       STErrCodeStatInfo*          LPSTERRCODESTATINFO;
typedef const STErrCodeStatInfo*         LCPSTERRCODESTATINFO;


class STAwardStatInfo
{
        public: /* members */
                STAwardBaseData stAwardData; //奖品基础数据信息
                int32_t iCount; //该类奖品的中奖次数

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       STAwardStatInfo          tagSTAwardStatInfo;
typedef       STAwardStatInfo             STAWARDSTATINFO;
typedef       STAwardStatInfo*          LPSTAWARDSTATINFO;
typedef const STAwardStatInfo*         LCPSTAWARDSTATINFO;


class STStatBusiInfo
{
        public: /* members */
                union
                {
                        char chReserve; /**id:<all other values>*/
                        STAwardStatInfo stAwardStatInfo; /**id:ESTAT_TYPE_AWARD*/
                        STErrCodeStatInfo stErrCodeStatInfo; /**id:ESTAT_TYPE_ERRORCODE*/
                };

        public: /* methods */
                TdrError::ErrorType construct(int64_t selector);

                TdrError::ErrorType construct();

                TdrError::ErrorType pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(int64_t selector, char* buffer, size_t size,
                                         size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(int64_t selector, const char* buffer, size_t size,
                                           size_t* usedSize = NULL, unsigned cutVer = 0);

                TdrError::ErrorType visualize(int64_t selector, TdrWriteBuf& destBuf,
                                              int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(int64_t selector, char* buffer, size_t size,
                                              size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       STStatBusiInfo          tagSTStatBusiInfo;
typedef       STStatBusiInfo             STSTATBUSIINFO;
typedef       STStatBusiInfo*          LPSTSTATBUSIINFO;
typedef const STStatBusiInfo*         LCPSTSTATBUSIINFO;


class CSStatForBusiReq
{
        public: /* members */
                int32_t iTestStartTime; //业务测试开始时间
                unsigned char bStatType; //业务回包统计数据类型
                int32_t iNumber; //该类数据的数目
                STStatBusiInfo astStatBusiInfo[STAT_BUSI_MAX_NUM]; //业务回包统计数据信息
                int32_t iTotalCount; //统计的总次数,比如抽奖总次数

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSStatForBusiReq          tagCSStatForBusiReq;
typedef       CSStatForBusiReq             CSSTATFORBUSIREQ;
typedef       CSStatForBusiReq*          LPCSSTATFORBUSIREQ;
typedef const CSStatForBusiReq*         LCPCSSTATFORBUSIREQ;


class CSStatForBusiRes
{
        public: /* members */
                int32_t iResult;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSStatForBusiRes          tagCSStatForBusiRes;
typedef       CSStatForBusiRes             CSSTATFORBUSIRES;
typedef       CSStatForBusiRes*          LPCSSTATFORBUSIRES;
typedef const CSStatForBusiRes*         LCPCSSTATFORBUSIRES;


class CSEasyModeReq
{
        public: /* members */
                int32_t iTestStartTime; //本次测试开始时间
                int32_t iTestLastTime; //本次统计的最新时间
                char szTestUrl[1024]; //测试url
                int32_t iHttpCode; //http返回码
                int32_t iCount; //统计次数

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSEasyModeReq          tagCSEasyModeReq;
typedef       CSEasyModeReq             CSEASYMODEREQ;
typedef       CSEasyModeReq*          LPCSEASYMODEREQ;
typedef const CSEasyModeReq*         LCPCSEASYMODEREQ;


class CSEasyModeTotalReq
{
        public: /* members */
                int32_t iTestStartTime; //本次测试开始时间
                int32_t iTestLastTime; //本次统计的最新时间
                char szTestUrl[1024]; //测试url
                uint32_t dwRecv1xxNum; //
                uint32_t dwRecv2xxNum; //
                uint32_t dwRecv3xxNum; //
                uint32_t dwRecv4xxNum; //
                uint32_t dwRecv5xxNum; //

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       CSEasyModeTotalReq          tagCSEasyModeTotalReq;
typedef       CSEasyModeTotalReq             CSEASYMODETOTALREQ;
typedef       CSEasyModeTotalReq*          LPCSEASYMODETOTALREQ;
typedef const CSEasyModeTotalReq*         LCPCSEASYMODETOTALREQ;


class HttpDebugReq
{
        public: /* members */
                int32_t iDebugid;
                int32_t iRobotid;
                int32_t iUrlid;
                int32_t iHttcode;
                char szContenttype[64];
                char szSrcip[32];
                int32_t iSrcport;
                char szDestip[32];
                int32_t iDestport;
                uint64_t ullTime;
                int32_t iFlag;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       HttpDebugReq          tagHttpDebugReq;
typedef       HttpDebugReq             HTTPDEBUGREQ;
typedef       HttpDebugReq*          LPHTTPDEBUGREQ;
typedef const HttpDebugReq*         LCPHTTPDEBUGREQ;


class PkgHead
{
        public: /* members */
                int32_t iPkgLength; //消息包总体的长度
                int32_t iCmdID; //命令字ID
                int32_t iVersion; //留做备用
                int32_t iSrcID; //发送源实体ID
                uint32_t dwTv_sec; //发包机器的当前时间：秒
                uint32_t dwTv_msec; //发包机器的当前时间：微妙
                char szPrjName[PROJECT_NAME_MAX_LEN];
                char szIp[PROJECT_NAME_MAX_LEN];
                int32_t iTestID; //测试ID
                int32_t iControlcenterID; //ccID
                int32_t iAgentID; //agentid
                int32_t iGroupID; //小阶段测试ID，表明这组GAPS的数据是同一测试项目的

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       PkgHead          tagPkgHead;
typedef       PkgHead             PKGHEAD;
typedef       PkgHead*          LPPKGHEAD;
typedef const PkgHead*         LCPPKGHEAD;


class PkgBody
{
        public: /* members */
                union
                {
                        CSDataSendReq stDataSendReq; /**id:CS_CMD_DC_SENDDATA_REQ*/
                        CSDataSendRes stDataSendRes; /**id:CS_CMD_DC_SENDDATA_RES*/
                        CSHeartBeat stHeartBeat; /**id:CS_CMD_HEARTBEAT*/
                        CSSendBaseReq stCSSendBaseReq; /**id:CS_CMD_DC_SEND_BASE_INFO_REQ*/
                        CSSendMemReq stCSSendMemReq; /**id:CS_CMD_DC_SEND_MEMORY_INFO_REQ*/
                        CSSendCPUReq stCSSendCPUReq; /**id:CS_CMD_DC_SEND_CPU_INFO_REQ*/
                        CSSendDiskReq stCSSendDiskReq; /**id:CS_CMD_DC_SEND_DISK_INFO_REQ*/
                        CSSendNetReq stCSSendNetReq; /**id:CS_CMD_DC_SEND_NETWORK_INFO_REQ*/
                        CSSendProcessReq stCSSendProcessReq; /**id:CS_CMD_DC_SEND_PROCESS_INFO_REQ*/
                        TestIpReq stTestIpReq; /**id:CS_CMD_DC_SEND_TEST_IP_REQ*/
                        CSStatisticsLogReq stStaticsLogReq; /**id:CS_CMD_GAPS_STATICS_REQ*/
                        CSStatisticsLogRes stStaticsLogRes; /**id:CS_CMD_GAPS_STATICS_RES*/
                        CSGapsMsgResTimeReq stMsgResTimeReq; /**id:CS_CMD_GAPS_MSGRESTIME_REQ*/
                        CSGapsMsgResTimeRes stMsgResTimeRes; /**id:CS_CMD_GAPS_MSGRESTIME_RES*/
                        CSScriptLogReq stScriptLogReq; /**id:CS_CMD_GAPS_SCRIPT_REQ*/
                        CSScriptLogRes stScriptLogRes; /**id:CS_CMD_GAPS_SCRIPT_RES*/
                        CSGapsTestStartReq stTestStartReq; /**id:CS_CMD_GAPS_TESTSTART_REQ*/
                        CSGapsTestStartRes stTestStartRes; /**id:CS_CMD_GAPS_TESTSTART_RES*/
                        CSGapsTestEndReq stTestEndReq; /**id:CS_CMD_GAPS_TESTEND_REQ*/
                        CSGapsTestEndRes stTestEndRes; /**id:CS_CMD_GAPS_TESTEND_RES*/
                        CSGapsTransInfo stTransInfo; /**id:CS_CMD_GAPS_TRANS_INFO*/
                        CSGapsTransInfoArray stTransInfoArray; /**id:CS_CMD_GAPS_TRANS_INFO_ARRAY*/
                        CSStatForBusiReq stStatForBusi; /**id:CS_CMD_STATFORBUSI_REQ*/
                        CSEasyModeReq stEasyModeReq; /**id:CS_CMD_EASY_MODE_REQ*/
                        CSEasyModeTotalReq stEasyModeTotalReq; /**id:CS_CMD_EASY_MODE_TOTAL_REQ*/
                        HttpDebugReq stHttpDebugReq; /**id:CS_CMD_GAPS_HTTP_DEBUG_REQ*/
                };

        public: /* methods */
                TdrError::ErrorType construct(int64_t selector);

                TdrError::ErrorType construct();

                TdrError::ErrorType pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(int64_t selector, char* buffer, size_t size,
                                         size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(int64_t selector, const char* buffer, size_t size,
                                           size_t* usedSize = NULL, unsigned cutVer = 0);

                TdrError::ErrorType visualize(int64_t selector, TdrWriteBuf& destBuf,
                                              int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(int64_t selector, char* buffer, size_t size,
                                              size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       PkgBody          tagPkgBody;
typedef       PkgBody             PKGBODY;
typedef       PkgBody*          LPPKGBODY;
typedef const PkgBody*         LCPPKGBODY;


class DataProPkg
{
        public: /* members */
                PkgHead stHead;
                PkgBody stBody;

        public: /* methods */
                TdrError::ErrorType construct();

                TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
                TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

                TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
                TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

                /* set indent = -1 to disable indent */
                TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
                const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


        public:
                /* version infomation */
                enum
                {
                        BASEVERSION = 1,
                        CURRVERSION = 1,
                };
};

typedef       DataProPkg          tagDataProPkg;
typedef       DataProPkg             DATAPROPKG;
typedef       DataProPkg*          LPDATAPROPKG;
typedef const DataProPkg*         LCPDATAPROPKG;


#pragma pack()

}
#endif
